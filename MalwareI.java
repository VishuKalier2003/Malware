/* You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1... Some nodes initial are initially infected by malware... Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner... Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops... We will remove exactly one node from initial... Return the node that, if removed, would minimize M(initial)... If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index... Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread...
 * Eg 1: graph = [[1,1,0],[1,1,0],[0,0,1]]        initial = [1,0]         Output = 0
 * Eg 2: graph = [[1,0,0],[0,1,0],[0,0,1]]        initial = [0,2]         Output = 0
 * Eg 3: graph = [[1,1,1],[1,1,1],[1,1,1]]        initial = [1,2]         Output = 1
 */
import java.util.*;
public class MalwareI
{
    public int MinimumMalwareSpread(int graph[][], int initial[])
    {
        int dp[][] = new int[initial.length][2];    // Creating a DP Array of the number of infected nodes by the initial infected nodes...
        int max = 0, index = dp.length-1;
        for(int i = 0; i < initial.length; i++)
        {
            for(int j = 0; j < graph.length; j++)
            {
                if(graph[initial[i]][j] == 1)    // If the current node is connected to any initially infected nodes...
                    dp[i][0] = dp[i][0] + 1;     // Increment the number of infected nodes by that node by one...
            }
            dp[i][1] = initial[i];    // Setting the node number...
        }
        for(int i = dp.length-1; i >= 0; i--)
        {
            if(dp[i][0] >= max)     // Iterating backwards to find the maximum with least index...
            {
                max = Math.max(dp[i][0], max);
                index = i;     // Updating the index...
            }
        }
        return dp[index][1];     // Returning the index of the maximum degree node...
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int n;
        System.out.print("Enter the number of nodes : ");
        n = sc.nextInt();
        int graph[][] = new int[n][n];
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                System.out.print("Enter the connected state of "+(i+1)+" node and "+(j+1)+" node : ");
                graph[i][j] = sc.nextInt();
            }
        }
        System.out.print("Enter the number of Nodes infected with malware : ");
        n = sc.nextInt();
        int infected[] = new int[n];
        for(int i = 0; i < n; i++)
        {
            System.out.print("Enter the Infected Node : ");
            infected[i] = sc.nextInt();
        }
        MalwareI malwareI = new MalwareI();    // Object creation...
        System.out.println("The Maximum Malware Spread : "+malwareI.MinimumMalwareSpread(graph, infected));
        sc.close();
    }
}

// Time Complexity  - O(n*m) time...        m = number of initial nodes...
// Space Complexity - O(m) space...

/* DEDUCTIONS :- 
 * 1. Since the node adjacent to an initially infected node only, gets infected so the node which has maximum degree will infect the most nodes...
 * 2. Thus, we find the first initial node with maximum degree...
*/